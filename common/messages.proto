// awesome.proto
package chewchoo;
syntax = "proto3";




/*********************************************************/
/*                                                       */
/*                         ENUMS                         */
/*                                                       */
/*********************************************************/


enum InvincibilityState {
    TRAIN_NOT_INVINCIBLE = 0;
    TRAIN_BLINKING = 1;
    TRAIN_FULLY_INVISIBLE = 2;
}

enum Direction {
    LEFT_TO_TOP = 0;
    LEFT_TO_RIGHT = 1;
    LEFT_TO_BOTTOM = 2;
    RIGHT_TO_TOP = 3;
    RIGHT_TO_LEFT = 4;
    RIGHT_TO_BOTTOM = 5;
    TOP_TO_LEFT = 6;
    TOP_TO_RIGHT = 7;
    TOP_TO_BOTTOM = 8;
    BOTTOM_TO_TOP = 9;
    BOTTOM_TO_LEFT = 10;
    BOTTOM_TO_RIGHT = 11;
};

enum SpeedType {
    SPEED_CONSTANT = 0;
    SPEED_ACCELERATING = 1;
    SPEED_DECELERATING = 2;
}


/*********************************************************/
/*                                                       */
/*                        STRUCTS                        */
/*                                                       */
/*********************************************************/

message Track {
    required int32 x = 1;
    required int32 y = 2;
    required Direction direction = 3;
}

message LatestSpeedUpdate {
    required SpeedType update_type = 1;
    required float update_time = 2;
    required float update_position = 3;
    required float update_time_speed = 4;
}

message NewTrain {
    required uint32 length = 1;
    required bool is_bot = 2;
    required InvincibilityState invincibility_state = 3;
    required LatestSpeedUpdate latest_speed_update = 4;
}

message NewRoute {
    required NewTrain train = 1;
    repeated Track tracks = 2;
    repeated Track leftover_tracks = 3;
    required string id = 4;
}


/*********************************************************/
/*                                                       */
/*                     SERVER EVENTS                     */
/*                                                       */
/*********************************************************/

message LatencyServerEvent {
    required double latency = 1;
}

message SpeedServerEvent {
    required string id = 1;
    required LatestSpeedUpdate update = 2;
}

message NewRouteServerEvent {
    required NewRoute new_route = 1;
}

message RouteUpdateServerEvent {
    repeated Track tracks = 1;
    repeated Track leftover_tracks = 2;
    required LatestSpeedUpdate latest_speed_update = 3;
}

message RouteRemovedServerEvent {
    required string id = 1;
}

message InvincibilityChangeServerEvent {
    required string id = 1;
    required InvincibilityState new_invincibility_state = 2;
}

message ServerEvent {
    oneof type {
        LatencyServerEvent latency = 1;
        SpeedServerEvent speed = 2;
        NewRouteServerEvent new_route = 3;
        RouteUpdateServerEvent route_update = 4;
        RouteRemovedServerEvent route_removed = 5;
        InvincibilityChangeServerEvent invincibility_change = 6;
    }
}


/*********************************************************/
/*                                                       */
/*                    SERVER MESSAGES                    */
/*                                                       */
/*********************************************************/

message ConnectionServerMessage {
    /* 
    the goal of the connection message is: 
       * send the player it's route_id
       * get the player up to speed with the game state at the moment he joins.
    the client has to save all the periodic _events_ that happenned along with the time that they happnned at,
    and after receiving the connection message he shall discard events that happnned before the events,
    and apply any events that happnned _after_ the time in this message.
    */
    required float server_time = 1; /* the server time at the time of the latest server tick. */
    required string route_id = 2; /* route id of the connected player */
    repeated NewRoute new_routes = 3;
}

message UpdateServerMessage {
    required float server_time = 1;
    repeated ServerEvent events = 2;
}

message ErrorServerMessage {
    required string message = 1;
}

message WinServerMessage {

}

message ServerMessage {
    oneof type {
        ErrorServerMessage error = 2;
        WinServerMessage win = 3;
        ConnectionServerMessage connection = 6;
        UpdateServerMessage update = 7;
    }
}


/*********************************************************/
/*                                                       */
/*                    CLIENT MESSAGES                    */
/*                                                       */
/*********************************************************/

message LatencyRequestClientMessage {
    required float server_time = 1;
}

message SpeedChangeClientMessage {
    required SpeedType type = 1;
}

message StartPlayingClientMessage {

}

message ClientMessage {
    oneof type {
        StartPlayingClientMessage start_playing = 1;
        LatencyRequestClientMessage latency_request = 2;
        SpeedChangeClientMessage speed_change = 3;
    }
}